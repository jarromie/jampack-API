plugins {
    id 'java'
    id 'maven-publish'
    id 'net.researchgate.release' version '2.8.1'
}

allprojects {
    repositories {
        mavenLocal()
        maven {
            url = 'https://repo.runelite.net'
        }
        mavenCentral()
        jcenter()
    }

    def runeLiteVersion = 'latest.release'

    plugins.withType(JavaPlugin) {
        dependencies {
            compileOnly 'org.projectlombok:lombok:1.18.20'
            annotationProcessor 'org.projectlombok:lombok:1.18.20'

            compileOnly group: 'net.runelite', name: 'client', version: runeLiteVersion
            testImplementation group: 'net.runelite', name: 'client', version: runeLiteVersion
            testImplementation group: 'net.runelite', name: 'jshell', version: runeLiteVersion

            testImplementation 'junit:junit:4.12'
        }
    }
}

dependencies {
    implementation project(path: ':InteractionApi')
    implementation project(path: ':UtilityApi')
}

sourceSets {
    main {
        java {
            srcDir "src"
        }

    }
}

group = 'tech.whocodes.jampack'
version = '1.0.1-beta'
sourceCompatibility = "11"

task JamJar(type: Jar) {
    manifest {
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

subprojects {
    tasks.withType(Jar) {
        doLast {
            copy {
                from("./build/libs/")
                into("../release/")
            }
        }
    }
}

publishing {
    publications {
        gpr(MavenPublication) {
            groupId 'tech.whocodes.jampack'
            artifactId 'jampack-api'
            version '1.0.1-SNAPSHOT'

            from components.java
        }
    }
    repositories {
        maven {
            name = "jampack-API"
            url = uri("https://maven.pkg.github.com/jarromie/jampack-api")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
targetCompatibility = JavaVersion.VERSION_11
